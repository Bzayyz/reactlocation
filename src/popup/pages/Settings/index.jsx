import { Button, Input, Space, message, Collapse, Radio, Checkbox } from "antd";
import React from "react";
import {
  get,
  set,
  backgroundClient,
  ChromeMessage,
  contentClient,
} from "../../../chrome";
import { shortKeyKey } from "../../../const";
const SettingPage = () => {
  const [jwt, setJwt] = React.useState("");
  const [editor, setEditor] = React.useState("");
  const [shortKeys, setShortKeys] = React.useState([]);
  const [buildTool, setBuildTool] = React.useState("");
  const [customPath, setCustomPath] = React.useState("");
  const [OriginCustomPath, setOriginCustomPath] = React.useState("");
  const [OriginJwt, setOriginJwt] = React.useState("");
  const [OriginEditor, setOriginEditor] = React.useState("");
  const [OriginBuildTool, setOriginBuildTool] = React.useState("");
  const [OriginShortKeys, setOriginShortKeys] = React.useState([]);
  React.useEffect(() => {
    Promise.all([
      get("deploy-token"),
      get("editor"),
      get(shortKeyKey),
      get("buildTool"),
      get("customPath"),
    ]).then(([token, editor, shortkeys, buildTool, customPath]) => {
      if (!shortkeys?.length) set(shortKeyKey, ["metaKey"]);
      if (!editor) set("editor", "vscode");
      setJwt(token);
      setEditor(editor ?? "vscode");
      setShortKeys(shortkeys?.length ? shortkeys : ["metaKey"]);
      setOriginJwt(token);
      setBuildTool(buildTool ?? "other");
      setCustomPath(customPath);
      setOriginCustomPath(customPath);
      setOriginEditor(editor);
      setOriginBuildTool(buildTool);
      setOriginShortKeys(shortkeys);
      setOriginBuildTool;
    });
  }, []);

  const panelStyle = {
    marginBottom: 24,
    background: "rgba(0, 0, 0, 0.02)",
    borderRadius: 8,
    border: "none",
  };
  return (
    <>
      <Collapse
        bordered={false}
        defaultActiveKey={[]}
        style={{
          background: panelStyle.background,
        }}
      >
        {/* <Collapse.Panel header="Token" key="1" style={panelStyle}>
          <Space direction="horizontal">
            <Input.TextArea
              placeholder="Input your x-jwt-token here..."
              value={jwt}
              onChange={(e) => {
                setJwt(e.target.value);
              }}
              autoSize={{ minRows: 1, maxRows: 6 }}
            />
          </Space>
        </Collapse.Panel> */}
        <Collapse.Panel header="Editor" key="2" style={panelStyle}>
          <Radio.Group
            value={editor}
            onChange={(e) => {
              setEditor(e.target.value);
            }}
          >
            <Space direction="vertical">
              <Radio value="vscode">vscode</Radio>
              <Radio value="vscode-insiders">vscode-insiders</Radio>
              <Radio value="webStorm">webStorm</Radio>
            </Space>
          </Radio.Group>
        </Collapse.Panel>
        <Collapse.Panel header="Custom Path" key="5" style={panelStyle}>
          <p>
            {
              "use ${pathName}、${lineNumber} 、${columnNumber} to concat your Path."
            }
          </p>
          <p>
            {
              "The priority of Custom Path takes precedence over specifying the editor."
            }
          </p>

          <p>{"For example: vscode://file/${fileName}:${lineNumber}"}</p>
          <Input
            value={customPath}
            onChange={(e) => {
              setCustomPath(e.target.value);
            }}
            autoSize={{ minRows: 1, maxRows: 6 }}
          />
        </Collapse.Panel>
        <Collapse.Panel header="Build Tools" key="4" style={panelStyle}>
          <p>
            {
              'The file path generated by different Build Tools may vary. For example, the filePath generated by rspack is "<realPathName>".'
            }
          </p>
          <Radio.Group
            value={buildTool}
            onChange={(e) => {
              setBuildTool(e.target.value);
            }}
          >
            <Space direction="vertical">
              <Radio value="rspack">rspack</Radio>
              <Radio value="other">Other</Radio>
            </Space>
          </Radio.Group>
        </Collapse.Panel>
        <Collapse.Panel header="ShortcutKeys" key="3" style={panelStyle}>
          Free combination and no limit in order , the default key is
          'Command/Win'. After changing this option, your page needs manually
          refreshing.
          <Checkbox.Group
            style={{ marginTop: 10 }}
            value={shortKeys}
            options={[
              { label: "Command/Win", value: "metaKey" },
              { label: "Option", value: "altKey" },
              { label: "Shift", value: "shiftKey" },
            ]}
            onChange={setShortKeys}
          />
        </Collapse.Panel>
      </Collapse>
      <Button
        onClick={async () => {
          const jwtChanged = OriginJwt !== jwt;
          const editorChanged = OriginEditor !== editor;
          const buildToolChanged = OriginBuildTool !== buildTool;
          const shortKeysChanged = OriginShortKeys !== shortKeys;
          const customPathChanged = OriginCustomPath !== customPath;
          if (
            !jwtChanged &&
            !editorChanged &&
            !shortKeysChanged &&
            !buildToolChanged &&
            !customPathChanged
          )
            message.success("Nothing Changed");
          if (jwtChanged) {
            set("deploy-token", jwt);
            setOriginJwt(jwt);
          }
          if (shortKeysChanged) {
            set(shortKeyKey, shortKeys);
            setOriginShortKeys(shortKeys);
          }
          if (editorChanged) {
            set("editor", editor);
            await backgroundClient
              .seedMessage(new ChromeMessage("editor changed", editor))
              .then(
                (success) => {
                  setOriginEditor(editor);
                },
                (error) => {
                  message.error(
                    "It may occurs some bug to the extention, please refresh the tab page manually"
                  );
                  setTimeout(() => message.destroy(), 10000);
                }
              );
          }
          if (customPathChanged) {
            set("customPath", customPath);
            await backgroundClient
              .seedMessage(new ChromeMessage("customPath changed", customPath))
              .then(
                (success) => {
                  setOriginCustomPath(customPath);
                },
                (error) => {
                  message.error(
                    "It may occurs some bug to the extention, please refresh the tab page manually"
                  );
                  setTimeout(() => message.destroy(), 10000);
                }
              );
          }
          if (buildToolChanged) {
            set("buildTool", buildTool);
            await backgroundClient
              .seedMessage(new ChromeMessage("buildTool changed", buildTool))
              .then(
                (success) => {
                  setOriginBuildTool(buildTool);
                },
                (error) => {
                  message.error(
                    "It may occurs some bug to the extention, please refresh the tab page manually"
                  );
                  setTimeout(() => message.destroy(), 10000);
                }
              );
          }
          let temp = [
            [jwtChanged, "Jwt"],
            [editorChanged, "Editor"],
            [shortKeysChanged, "Shortcut Keys"],
            [buildToolChanged, "Build Tool"],
            [customPathChanged, "Custom Path"],
          ].filter((i) => i[0]);
          let str = temp.reduce(
            (pre, cur, idx) => (idx ? "、" : "" + pre + cur[1]),
            ""
          );
          message.success(`Save ${str} successfully`);
          setTimeout(() => message.destroy(), 3000);
        }}
      >
        Save
      </Button>
    </>
  );
};

export default SettingPage;
